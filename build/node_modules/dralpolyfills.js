// YellowLeaf FTP by Michiel Dral 
var EventEmitter, Promise, polyfill, stream,
  __hasProp = {}.hasOwnProperty,
  __slice = [].slice;

polyfill = require('polyfill');

EventEmitter = require('events').EventEmitter;

stream = require('stream');

Promise = require('bluebird');

polyfill.extend(Object, 'forEach', function(fn) {
  var key, value, _results;
  _results = [];
  for (key in this) {
    if (!__hasProp.call(this, key)) continue;
    value = this[key];
    _results.push(fn(value, key, this));
  }
  return _results;
});

polyfill.extend(EventEmitter, 'promiseOnce', function(event) {
  return new Promise((function(_this) {
    return function(resolve, reject) {
      var error;
      error = function(e) {
        return reject(e);
      };
      return _this.once(event, function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        resolve.apply(null, args);
        return this.removeListener('error', error);
      }).once('error', error);
    };
  })(this));
});

polyfill.extend(stream.Readable, 'dataOnce', function() {
  return new Promise((function(_this) {
    return function(resolve, reject) {
      return _this.once('readable', function() {
        var data;
        data = this.read();
        if (!data) {
          return resolve(this.dataOnce);
        }
        return resolve(data);
      });
    };
  })(this));
});

polyfill.extend(stream.Writable, 'writeLn', function() {
  var args, line;
  line = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
  return this.write.apply(this, [line + '\r\n'].concat(__slice.call(args)));
});

polyfill.extend(String, 'startsWith', function(searchString, position) {
  if (position == null) {
    position = 0;
  }
  return this.indexOf(searchString, position) === position;
});

// YellowLeaf FTP by Michiel Dral 
var EventEmitter, FtpDataPool, Promise, debug, net, stream,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice;

net = require("net");

EventEmitter = require("events").EventEmitter;

stream = require('stream');

Promise = require('bluebird');

debug = function() {};

FtpDataPool = (function(_super) {
  __extends(FtpDataPool, _super);

  function FtpDataPool(mainSocket) {
    this.mainSocket = mainSocket;
    this.IsWaitingForConnection = false;
  }

  FtpDataPool.prototype.introduce = function(message) {
    var error;
    if (message == null) {
      message = "Going to send ya some data";
    }
    try {
      if (this.connection.introduced === true) {
        return;
      }
      this.mainSocket.write("150 " + message);
      return this.connection.introduced = true;
    } catch (_error) {
      error = _error;
      return debug("OH:", error.message);
    }
  };

  FtpDataPool.prototype.sayGoodbye = function(message) {
    if (message == null) {
      message = "Data all send, do you copy?";
    }
    if (this.connection.saidGoodbye !== true) {
      this.mainSocket.write("226 " + message);
      this.connection.saidGoodbye = true;
    }
    return this.connection;
  };

  FtpDataPool.prototype.setConnection = function(connection, raw) {
    if (raw == null) {
      raw = false;
    }
    this.connection = connection;
    this.connection.introduced = raw;
    this.connection.saidGoodbye = raw;
    this.emit('connection', this.connection);
    this.connection.on('error', function(err) {
      return debug('connection error', err);
    });
    return this.connection.on('finish', (function(_this) {
      return function() {
        _this.sayGoodbye();
        return _this.connection = void 0;
      };
    })(this));
  };

  FtpDataPool.prototype.getConnection = function(cb) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        return process.nextTick(function() {
          if (_this.connection != null) {
            return resolve(_this.connection);
          } else if (!_this.IsWaitingForConnection) {
            debug('No connection!');
            return reject(new Error("No connection openned, nowhere!"));
          } else {
            return _this.once('connection', resolve);
          }
        });
      };
    })(this)).then((function(_this) {
      return function(connection) {
        debug('introducting');
        _this.introduce();
        debug('Done introducing');
        if (cb != null) {
          cb(connection);
        }
        return connection;
      };
    })(this));
  };

  FtpDataPool.prototype.openPasv = function(raw) {
    var server;
    this.IsWaitingForConnection = true;
    return server = net.createServer((function(_this) {
      return function(socket) {
        _this.setConnection(socket, raw);
        server.close();
        return _this.IsWaitingForConnection = false;
      };
    })(this)).listen(0, (function(_this) {
      return function() {
        var host, port;
        port = server.address().port;
        host = _this.mainSocket.host;
        return _this.mainSocket.write("227 Entering Passive Mode (" + (host.split('.').join(',')) + "," + (port >> 8 & 0xFF) + "," + (port & 0xFF) + ").");
      };
    })(this));
  };

  FtpDataPool.prototype.openPort = function(args, raw) {
    var ip, port1, port2, socket, _i, _ref;
    this.IsWaitingForConnection = true;
    _ref = args.split(','), ip = 3 <= _ref.length ? __slice.call(_ref, 0, _i = _ref.length - 2) : (_i = 0, []), port1 = _ref[_i++], port2 = _ref[_i++];
    return socket = net.connect({
      port: (parseInt(port1) << 8) + parseInt(port2),
      host: ip.join('.')
    }, (function(_this) {
      return function() {
        _this.setConnection(socket, raw);
        _this.IsWaitingForConnection = false;
        return _this.mainSocket.write('200 Got it, opening secret tunnel');
      };
    })(this));
  };

  return FtpDataPool;

})(EventEmitter);

net.Socket.prototype.writeLn = function() {
  var args, chunk;
  chunk = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
  return this.write.apply(this, [chunk + '\r\n'].concat(__slice.call(args)));
};

module.exports = FtpDataPool;

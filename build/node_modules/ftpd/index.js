// YellowLeaf FTP by Michiel Dral 
var EventEmitter, FtpClient, FtpDataPool, FtpServer, Promise, debug, net, _debug,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice;

net = require("net");

Promise = require('bluebird');

EventEmitter = require("events").EventEmitter;

FtpDataPool = require('./ftpdatapool');

_debug = require('debug')('[FTP]', 'cyan');

debug = function() {};

FtpServer = (function(_super) {
  __extends(FtpServer, _super);

  function FtpServer(connectionListener) {
    this.server = net.createServer((function(_this) {
      return function(socket) {
        var client;
        client = new FtpClient(socket);
        return _this.emit('connection', client);
      };
    })(this));
    if (connectionListener != null) {
      this.on('connection', connectionListener);
    }
    ['address'].forEach((function(_this) {
      return function(method) {
        return _this[method] = _this.server[method];
      };
    })(this));
  }

  ['listen', 'close'].forEach(function(method) {
    return FtpServer.prototype[method] = function() {
      var args, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      (_ref = this.server)[method].apply(_ref, args);
      return this;
    };
  });

  FtpServer.prototype.debug = function(pleasedo) {
    if (pleasedo) {
      debug = _debug;
    } else {
      debug = function() {};
    }
    return this;
  };

  return FtpServer;

})(EventEmitter);

FtpClient = (function(_super) {
  __extends(FtpClient, _super);

  function FtpClient(connection) {
    var _ref;
    this.host = (_ref = connection.localAddress.match(/(\d{1,3}\.){3}\d{1,3}/)) != null ? _ref[0] : void 0;
    if (!this.host) {
      throw new Error("IPv6 alarm: " + connection.localAddress);
    }
    this._connection = connection;
    this.dataServer = new FtpDataPool(this);
    this._connection.on('readable', (function(_this) {
      return function() {
        var args, cmd, data, options, _ref1;
        data = _this.read();
        if (data == null) {
          return;
        }
        _ref1 = data.split(' '), cmd = _ref1[0], args = 2 <= _ref1.length ? __slice.call(_ref1, 1) : [];
        cmd = cmd.toLowerCase();
        options = [];
        args = args.filter(function(arg) {
          if (arg.indexOf('-') === 0) {
            options.push(args);
            return false;
          } else {
            return true;
          }
        });
        cmd.options = options;
        debug("Command: " + cmd + " with " + args);
        if (_this.listeners('command.' + cmd).length < 1) {
          _this.emit('unknownCommand', cmd, args.join(' '));
        }
        return _this.emit('command.' + cmd, args.join(' '));
      };
    })(this));
    this.write('220 Welcome!');
  }

  FtpClient.prototype.write = function(data) {
    return this._connection.write(data + '\r\n');
  };

  FtpClient.prototype.read = function(size) {
    var data;
    data = this._connection.read(size);
    if (!data) {
      return;
    }
    return data.toString().trim();
  };

  FtpClient.prototype.end = function() {
    this._connection.end();
    return this.dataServer = void 0;
  };

  return FtpClient;

})(EventEmitter);

module.exports = FtpServer;

module.exports.FtpClient = FtpClient;

module.exports.FtpDataPool = FtpDataPool;

module.exports.defaults = {
  dataSocket: function(client) {
    client.on('command.pasv', function() {
      return this.dataServer.openPasv();
    });
    return client.on('command.port', function(args) {
      return this.dataServer.openPort(args);
    });
  },
  unknownCommand: function(client) {
    return client.on('unknownCommand', function(cmd, args) {
      debug("Command " + cmd + " not implemented (args: " + args + ").");
      return this.write('500 Sorry.');
    });
  },
  nonFileCommands: function(client) {

    /*
    Type and opts.. and maybe more like it later
     */
    var key, response, standardReplies, _results;
    client.mode = 'ascii';
    client.on('command.type', function(modechar) {
      if (modechar === 'I') {
        this.mode = null;
      } else if (modechar === 'A') {
        this.mode = 'ascii';
      }
      return this.write('200 Custom mode activated');
    });
    client.on('command.opts', function(opt) {
      if (opt.toUpperCase() === 'UTF8 ON') {
        this.write('200 Yo, cool with that!');
        return;
      }
      this.write('504 Sorry, I don\'t know how to handle this.');
      return console.log('Unknown OPTS:', opt);
    });
    standardReplies = {
      feat: '500 Go away',
      syst: '215 UNIX Type: L8',
      quit: '221 See ya.',
      noop: '200 OK.',
      site: '500 Go away'
    };
    _results = [];
    for (key in standardReplies) {
      response = standardReplies[key];
      _results.push(client.on("command." + key, (function(value) {
        return this.write(value);
      }).bind(client, response)));
    }
    return _results;
  }
};

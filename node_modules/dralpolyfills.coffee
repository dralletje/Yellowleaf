polyfill = require 'polyfill'
EventEmitter = require('events').EventEmitter
stream = require('stream')
Q = require 'kew'

polyfill.extend Object, 'forEach', (fn) ->
    for own key, value of this
        fn value, key, this

polyfill.extend EventEmitter, 'promiseOnce', (event) ->
  defered = Q['defer']()
  error = (e) ->
    defered.reject e

  @once event, (args...) ->
    defered.resolve args...
    @removeListener 'error', error
  .once 'error', error
  defered.promise
  
polyfill.extend stream.Readable, 'dataOnce', () ->
  defered = Q['defer']()
  @once 'readable', () ->
    data = @read()
    if not data
      return defered.resolve @dataOnce
    
    defered.resolve data
  defered.promise
  
polyfill.extend stream.Writable, 'writeLn', (line, args...) ->
  @write line + '\r\n', args...

polyfill.extend Function, 'asPromise', (args...) ->
  defered = Q['defer']()
  @call undefined, args..., defered.makeNodeResolver()
  defered.promise

## String
polyfill.extend String, 'startsWith', (searchString, position=0) ->
  @indexOf(searchString, position) is position

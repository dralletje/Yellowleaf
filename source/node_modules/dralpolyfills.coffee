polyfill = require 'polyfill'
EventEmitter = require('events').EventEmitter
stream = require('stream')
Promise = require 'bluebird'

polyfill.extend Object, 'forEach', (fn) ->
    for own key, value of this
        fn value, key, this

polyfill.extend EventEmitter, 'promiseOnce', (event) ->
    new Promise (resolve, reject) =>
      error = (e) ->
        reject e

      @once event, (args...) ->
        resolve args...
        @removeListener 'error', error
      .once 'error', error

polyfill.extend stream.Readable, 'dataOnce', () ->
  new Promise (resolve, reject) =>
    @once 'readable', () ->
      data = @read()
      if not data
        return resolve @dataOnce

      resolve data

polyfill.extend stream.Writable, 'writeLn', (line, args...) ->
  @write line + '\r\n', args...

#polyfill.extend Function, 'asPromise', (args...) ->
#  defered = Q['defer']()
#  @call undefined, args..., defered.makeNodeResolver()
#  defered.promise

## String
polyfill.extend String, 'startsWith', (searchString, position=0) ->
  @indexOf(searchString, position) is position

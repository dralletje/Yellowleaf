net = require "net"
EventEmitter = require("events").EventEmitter
stream = require 'stream'
Promise = require 'bluebird'

#require 'dralpolyfills'
#debug = require('debug')('[Data]', 'green')
debug = ->

class FtpDataPool extends EventEmitter
    constructor: (mainSocket) ->
        @mainSocket = mainSocket
        @IsWaitingForConnection = no

    ## These are to keep the dataSocket and the mainSocket in sync, a bit ##
    introduce: (message = "Going to send ya some data") ->
        try
          return if @connection.introduced is yes
          @mainSocket.write "150 #{message}"
          @connection.introduced = yes
        catch error
          debug "OH:", error.message

    sayGoodbye: (message = "Data all send, do you copy?") ->
      if @connection.saidGoodbye isnt yes
        @mainSocket.write "226 #{message}"
        @connection.saidGoodbye = yes
      @connection


    ## Get set connection
    setConnection: (connection, raw = no) ->
        @connection = connection

        # If it is set to raw, all these will be filled already
        @connection.introduced = raw
        @connection.saidGoodbye = raw

        @emit 'connection', @connection

        @connection.on 'error', (err) ->
          debug 'connection error', err

        @connection.on 'finish', () =>
          @sayGoodbye()
          @connection = undefined

    getConnection: (cb) ->
      new Promise (resolve, reject) =>
        process.nextTick () =>
          if @connection?
            resolve @connection
          else if not @IsWaitingForConnection
            debug 'No connection!'
            reject new Error "No connection openned, nowhere!"
          else
            resolve @promiseOnce 'connection'
      .then (connection) =>
          debug 'introducting'
          @introduce()
          debug 'Done introducing'
          if cb? then cb connection
          connection

    ## Open connection in Pasv and Port mode
    openPasv: (raw) ->
        @IsWaitingForConnection = yes
        server = net.createServer (socket) =>
            @setConnection(socket, raw)
            server.close()
            @IsWaitingForConnection = no
        .listen 0, () =>
            port = server.address().port
            host = @mainSocket.host
            @mainSocket.write("227 Entering Passive Mode (#{host.split('.').join(',')},#{port>>8&0xFF},#{port&0xFF}).")

    openPort: (args, raw) ->
        @IsWaitingForConnection = yes
        [ip..., port1, port2] = args.split(',')

        socket = net.connect
            port: (parseInt(port1)<<8) + parseInt(port2)
            host: ip.join '.'
        , () =>
            @setConnection(socket, raw)
            @IsWaitingForConnection = no
            @mainSocket.write '200 Got it, opening secret tunnel'

net.Socket::writeLn = (chunk, args...) ->
    @write chunk + '\r\n', args...

module.exports = FtpDataPool

net = require "net"
Promise = require 'bluebird'
EventEmitter = require("events").EventEmitter
FtpDataPool = require './ftpdatapool'

_debug = require('debug')('[FTP]', 'cyan')
debug = ->

class FtpServer extends EventEmitter
  constructor: (connectionListener) ->
    @server = net.createServer (socket) =>
      client = new FtpClient(socket)
      # FIXME: What was I doing? Remove this EmitWith thing!
      @emit 'connection', client

    if connectionListener?
      @on 'connection', connectionListener

    # Inherit methods/props with value
    ['address'].forEach (method) =>
      @[method] = @server[method]

  # Inherit methods that should return `this`
  ['listen', 'close'].forEach (method) =>
    @::[method] = (args...) ->
      @server[method] args...
      this

  debug: (pleasedo) ->
    if pleasedo
      debug = _debug
    else
      debug = ->
    return this # Chaining


class FtpClient extends EventEmitter
  constructor: (connection) ->
    @host = connection.localAddress.match(/(\d{1,3}\.){3}\d{1,3}/)?[0]
    if not @host
      throw new Error "IPv6 alarm: #{connection.localAddress}"

    @_connection = connection
    @dataServer = new FtpDataPool(this)

    @_connection.on 'readable', () =>
      data = @read()
      if not data? then return
      [cmd, args...] = data.split(' ')
      cmd = cmd.toLowerCase()

      options = []
      args = args.filter (arg) ->
        # TODO: What is this?
        if arg.indexOf('-') is 0
          options.push args
          false
        else
          true
      cmd.options = options

      debug "Command: #{cmd} with #{args}"

      if @listeners('command.' + cmd).length < 1
        @emit 'unknownCommand', cmd, args.join ' '

      @emit 'command.' + cmd, args.join ' '
    @write '220 Welcome!'


  write: (data) ->
    @_connection.write(data + '\r\n')

  read: (size) ->
    data = @_connection.read(size)
    return if not data
    data.toString().trim()

  end: () ->
    @_connection.end()
    @dataServer = undefined


module.exports = FtpServer
module.exports.FtpClient = FtpClient
module.exports.FtpDataPool = FtpDataPool

module.exports.defaults =
  dataSocket: (ftp) ->
    ftp.on 'command.pasv', () ->
      @dataServer.openPasv()
    ftp.on 'command.port', (args) ->
      @dataServer.openPort(args)

  unknownCommand: () ->
    ftp.on 'unknownCommand', (cmd, args) ->
      debug "Command #{cmd} not implemented (args: #{args})."
      return @write '500 Sorry.'
